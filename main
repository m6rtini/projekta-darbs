using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

public class Program
{
    static List<Income> incomes = new List<Income>();
    static List<Expense> expenses = new List<Expense>();
    static List<Subscription> subscriptions = new List<Subscription>();

    public static void Main()
    {
        while (true)
        {
            Console.WriteLine("\n==== Galvenā izvēlne ====");
            Console.WriteLine("1) Ienākumi");
            Console.WriteLine("2) Izdevumi");
            Console.WriteLine("3) Abonementi");
            Console.WriteLine("4) Saraksti");
            Console.WriteLine("5) Filtri");
            Console.WriteLine("6) Mēneša pārskats");
            Console.WriteLine("7) Import/Export JSON");
            Console.WriteLine("0) Iziet");
            Console.Write("Izvēlieties: ");
            string choice = Console.ReadLine();
            switch (choice)
            {
                case "1": AddIncome(); break;
                case "2": AddExpense(); break;
                case "3": AddSubscription(); break;
                case "4": ShowAllLists(); break;
                case "5": ApplyFilters(); break;
                case "6": MonthlyReport(); break;
                case "7": ImportExport(); break;
                case "0": return;
                default: Console.WriteLine("Nepareiza izvēle."); break;
            }
        }
    }

    static void AddIncome()
    {
        Console.Write("Datums (yyyy-mm-dd): ");
        if (!DateTime.TryParse(Console.ReadLine(), out DateTime date))
        {
            Console.WriteLine("Nepareizs datuma formāts.");
            return;
        }
        Console.Write("Avots: ");
        string source = ReadNonEmptyString();
        Console.Write("Summa (€): ");
        if (!SafeParseDecimal(Console.ReadLine(), out decimal amount) || amount <= 0)
        {
            Console.WriteLine("Nepareiza summa.");
            return;
        }

        incomes.Add(new Income { Date = date, Source = source, Amount = amount });
        Console.WriteLine("Ienākums pievienots.");
    }

    static void AddExpense()
    {
        Console.Write("Datums (yyyy-mm-dd): ");
        if (!DateTime.TryParse(Console.ReadLine(), out DateTime date))
        {
            Console.WriteLine("Nepareizs datuma formāts.");
            return;
        }
        Console.Write("Kategorija (Food, Transport, Fun, School, Other): ");
        if (!Enum.TryParse<Category>(Console.ReadLine(), true, out var category))
        {
            Console.WriteLine("Nepareiza kategorija.");
            return;
        }
        Console.Write("Summa (€): ");
        if (!SafeParseDecimal(Console.ReadLine(), out decimal amount) || amount <= 0)
        {
            Console.WriteLine("Nepareiza summa.");
            return;
        }
        Console.Write("Piezīme: ");
        string note = Console.ReadLine();

        expenses.Add(new Expense { Date = date, Category = category, Amount = amount, Note = note });
        Console.WriteLine("Izdevums pievienots.");
    }

    static void AddSubscription()
    {
        Console.Write("Nosaukums: ");
        string name = ReadNonEmptyString();
        Console.Write("Mēneša maksa (€): ");
        if (!SafeParseDecimal(Console.ReadLine(), out decimal price) || price <= 0)
        {
            Console.WriteLine("Nepareiza summa.");
            return;
        }
        Console.Write("Sākuma datums (yyyy-mm-dd): ");
        if (!DateTime.TryParse(Console.ReadLine(), out DateTime date))
        {
            Console.WriteLine("Nepareizs datuma formāts.");
            return;
        }
        Console.Write("Aktīvs? (jā/nē): ");
        string activeStr = Console.ReadLine().ToLower();
        bool active = activeStr == "jā" || activeStr == "ja";

        subscriptions.Add(new Subscription { Name = name, MonthlyPrice = price, StartDate = date, IsActive = active });
        Console.WriteLine("Abonements pievienots.");
    }

    static void ShowAllLists()
    {
        Console.WriteLine("\n-- Ienākumi --");
        foreach (var i in incomes.OrderByDescending(i => i.Date))
            Console.WriteLine($"{i.Date:yyyy-MM-dd} | {i.Source} | {i.Amount}€");

        Console.WriteLine("\n-- Izdevumi --");
        foreach (var e in expenses.OrderByDescending(e => e.Date))
            Console.WriteLine($"{e.Date:yyyy-MM-dd} | {e.Category} | {e.Amount}€ | {e.Note}");

        Console.WriteLine("\n-- Abonementi --");
        foreach (var s in subscriptions.OrderByDescending(s => s.StartDate))
            Console.WriteLine($"{s.Name} | {s.MonthlyPrice}€ | {s.StartDate:yyyy-MM-dd} | {(s.IsActive ? "Aktīvs" : "Neaktīvs")}");
    }

    static void ApplyFilters()
    {
        Console.Write("Filtrēt izdevumus pēc kategorijas? (jā/nē): ");
        if (Console.ReadLine().ToLower() == "jā")
        {
            Console.Write("Ievadi kategoriju: ");
            if (!Enum.TryParse<Category>(Console.ReadLine(), true, out var cat))
            {
                Console.WriteLine("Nepareiza kategorija.");
                return;
            }

            var filtered = expenses.Where(e => e.Category == cat).OrderByDescending(e => e.Date).ToList();
            Console.WriteLine($"Izdevumi kategorijā {cat}:");
            foreach (var e in filtered)
                Console.WriteLine($"{e.Date:yyyy-MM-dd} | {e.Amount}€ | {e.Note}");

            Console.WriteLine($"Kopā: {filtered.Sum(e => e.Amount)}€");
        }
        else
        {
            Console.WriteLine("Nav filtrēts.");
        }
    }

    static void MonthlyReport()
    {
        Console.Write("Ievadi mēnesi (yyyy-MM): ");
        string input = Console.ReadLine();
        if (!DateTime.TryParse(input + "-01", out DateTime month))
        {
            Console.WriteLine("Nepareizs mēneša formāts.");
            return;
        }

        var incomeSum = incomes.Where(i => i.Date.Year == month.Year && i.Date.Month == month.Month).Sum(i => i.Amount);
        var expenseSum = expenses.Where(e => e.Date.Year == month.Year && e.Date.Month == month.Month).Sum(e => e.Amount);
        var subSum = subscriptions.Where(s => s.IsActive && s.StartDate <= month).Sum(s => s.MonthlyPrice);

        decimal net = incomeSum - expenseSum - subSum;

        Console.WriteLine($"\nMēneša pārskats ({month:yyyy-MM}):");
        Console.WriteLine($"Ienākumi: {incomeSum}€");
        Console.WriteLine($"Izdevumi: {expenseSum}€");
        Console.WriteLine($"Abonementi: {subSum}€");
        Console.WriteLine($"Neto atlikums: {net}€");

        if (expenseSum > 0)
        {
            var categoryGroups = expenses
                .Where(e => e.Date.Year == month.Year && e.Date.Month == month.Month)
                .GroupBy(e => e.Category)
                .Select(g => new { Category = g.Key, Sum = g.Sum(x => x.Amount) })
                .OrderByDescending(x => x.Sum);

            Console.WriteLine("\nKategoriju procentuālais sadalījums:");
            foreach (var cat in categoryGroups)
            {
                double percent = Percent(cat.Sum, expenseSum);
                Console.WriteLine($"{cat.Category}: {percent:F2}%");
            }

            var maxExpense = expenses.Where(e => e.Date.Year == month.Year && e.Date.Month == month.Month)
                                     .OrderByDescending(e => e.Amount).FirstOrDefault();
            if (maxExpense != null)
                Console.WriteLine($"\nLielākais izdevums: {maxExpense.Amount}€ ({maxExpense.Category}, {maxExpense.Note})");

            int days = DateTime.DaysInMonth(month.Year, month.Month);
            decimal avgDayExpense = expenseSum / days;
            Console.WriteLine($"Vidējais dienas tēriņš: {avgDayExpense:F2}€");
        }
    }

    static void ImportExport()
    {
        Console.WriteLine("1) Eksportēt");
        Console.WriteLine("2) Importēt");
        Console.Write("Izvēlieties: ");
        string c = Console.ReadLine();
        if (c == "1")
        {
            var data = new DataStore
            {
                Incomes = incomes,
                Expenses = expenses,
                Subscriptions = subscriptions
            };
            var options = new JsonSerializerOptions { WriteIndented = true };
            string json = JsonSerializer.Serialize(data, options);
            Console.WriteLine("\nEksportēts JSON:\n" + json);
        }
        else if (c == "2")
        {
            Console.WriteLine("Ievadi JSON tekstu:");
            string json = Console.ReadLine();
            try
            {
                var data = JsonSerializer.Deserialize<DataStore>(json);
                if (data != null)
                {
                    incomes = data.Incomes ?? new List<Income>();
                    expenses = data.Expenses ?? new List<Expense>();
                    subscriptions = data.Subscriptions ?? new List<Subscription>();
                    Console.WriteLine("Dati importēti veiksmīgi.");
                }
                else
                {
                    Console.WriteLine("Neizdevās importēt datus.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Kļūda importējot JSON: " + ex.Message);
            }
        }
    }

    static bool SafeParseDecimal(string input, out decimal result)
    {
        return decimal.TryParse(input, out result) && result > 0;
    }

    static double Percent(decimal part, decimal whole)
    {
        if (whole == 0) return 0;
        return (double)(part / whole) * 100;
    }

    static string ReadNonEmptyString()
    {
        while (true)
        {
            string s = Console.ReadLine();
            if (!string.IsNullOrWhiteSpace(s))
                return s;
            Console.Write("Teksts nevar būt tukšs. Ievadi vēlreiz: ");
        }
    }
}

public class Income
{
    public DateTime Date { get; set; }
    public string Source { get; set; }
    public decimal Amount { get; set; }
}

public class Expense
{
    public DateTime Date { get; set; }
    public Category Category { get; set; }
    public decimal Amount { get; set; }
    public string Note { get; set; }
}

public class Subscription
{
    public string Name { get; set; }
    public decimal MonthlyPrice { get; set; }
    public DateTime StartDate { get; set; }
    public bool IsActive { get; set; }
}

public enum Category
{
    Food,
    Transport,
    Fun,
    School,
    Other
}

public class DataStore
{
    public List<Income> Incomes { get; set; }
    public List<Expense> Expenses { get; set; }
    public List<Subscription> Subscriptions { get; set; }
}
